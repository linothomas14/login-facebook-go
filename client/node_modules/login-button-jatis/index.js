// import React, { useState } from "react";
// import axios from "axios";

function ReverseString(str) {
  const reversedString = str.split("").reduce((acc, char) => char + acc, "");
  return reversedString;
}

// button.js
function JatisButton(options) {
  const button = document.createElement("button");
  button.textContent = options.text || "Click me";

  if (options.onClick) {
    button.addEventListener("click", options.onClick);
  }

  // {options.HOST}/login
  // header => app id, config id, secret
  // axio.("GET")

  if (options.style) {
    Object.assign(button.style, options.style);
  }

  return button;
}

// Check if there is a window object (to avoid issues in non-browser environments)
if (typeof window !== "undefined") {
  window.JatisButton = JatisButton;
}

// module.exports = createButton;

// const ReactLoginButton = ({ AppID, RedirectURL, ConfigID }) => {
//   // Function to handle click event
//   const handleClick = () => {
//     // Construct the URL with the given parameters
//     const url = `https://www.facebook.com/v19.0/dialog/oauth?client_id=${AppID}&redirect_uri=${RedirectURL}&scope=email&config_id=${ConfigID}`;

//     // Redirect to the constructed URL
//     window.location.href = url;
//   };

//   return <button onClick={handleClick}>Login with Facebook</button>;
// };

// const ReactLogoutButton = ({ initialText, onResponse }) => {
//     const handleClick = async () => {
//       try {
//         // POST request using Axios
//         const response = await axios.post("https://localhost:8080/logout", {
//           data: "Your data here", // Customize based on server requirements
//         });

//         // Call the onResponse callback with the response data if provided
//         if (onResponse && typeof onResponse === "function") {
//           onResponse(response.data);
//         }
//       } catch (error) {
//         // Error handling
//         console.error("Error posting message:", error);
//         if (onResponse && typeof onResponse === "function") {
//           onResponse(null);
//         }
//       }
//     };

//     return <button onClick={handleClick}>Login</button>;
//   };

function login(clientId, host) {
  const sessionCookie = getCookie("session");
  if (!sessionCookie) {
    const randomSession = generateRandomCookie("session", 32);
    window.open(
      `${host}/login-bento?client_id=${clientId}&session=${randomSession}`,
      "_blank"
    );
    window.location.reload();
  } else {
    fetchAccessToken(clientId, sessionCookie, host);
  }
}

function loginSchema2(clientId, host) {
  const sessionCookie = getCookie("session");
  if (!sessionCookie) {
    const randomSession = generateRandomCookie("session", 32);
    window.open(
      `${host}/login-bento?client_id=${clientId}&session=${randomSession}`,
      "_blank"
    );
    window.location.reload();
  } else {
    fetch(
      `${host}/get-access-token?client_id=${clientId}&session=${sessionCookie}`
    )
      .then((response) => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error("Network response was not ok.");
        }
      })
      .then((data) => {
        window.open(`${host}/success-login?tokenJatis=${data.token}`, "_blank");
      });
  }
}

function logout(clientId, host) {
  const sessionCookie = getCookie("session");
  if (sessionCookie) {
    fetchLogout(clientId, sessionCookie, host);
  }
}

function getCookie(name) {
  let cookieArray = document.cookie.split(";");
  for (let i = 0; i < cookieArray.length; i++) {
    let cookiePair = cookieArray[i].split("=");
    if (name === cookiePair[0].trim()) {
      return decodeURIComponent(cookiePair[1]);
    }
  }
  return null;
}

function setCookie(name, value, days) {
  var expires = "";
  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toUTCString();
  }
  document.cookie = name + "=" + (value || "") + expires + "; path=/";
}

function generateRandomCookie(name, days) {
  const randomValue =
    Math.random().toString(36).substring(2, 15) +
    Math.random().toString(36).substring(2, 15);
  setCookie(name, randomValue, days);
  return randomValue;
}

function fetchAccessToken(clientId, session, host) {
  fetch(`${host}/get-access-token?client_id=${clientId}&session=${session}`)
    .then((response) => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error("Network response was not ok.");
      }
    })
    // .then((data) => {
    //   document.getElementById("apiData").textContent =
    //     "Access Token: " + data.token;
    // })
    // .catch((error) => {
    //   document.getElementById("apiData").textContent = "Failed to fetch access";
    // });
}

function fetchLogout(clientId, session, host) {
  deleteCookie("session");
  fetch(`${host}/logout?client_id=${clientId}&session=${session}`)
    .then((response) => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error("Network response was not ok.");
      }
    })
    .then((data) => {
      // document.getElementById("apiData").textContent = "Successfully logout";
      window.location.reload();
    });
}

function deleteCookie(name) {
  document.cookie = name + "=; max-age=0; path=/"; // This sets the cookie's max-age to zero seconds, causing it to expire immediately
}

module.exports = {
  ReverseString,
  JatisButton,
  login,
  loginSchema2,
  logout
  // ReactLoginButton,
  // ReactLogoutButton
};
